// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataContainer_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpaceDescription_messages_2eproto;
namespace ns3_ai_gym {
class SpaceDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpaceDescription> _instance;
} _SpaceDescription_default_instance_;
class DiscreteSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscreteSpace> _instance;
} _DiscreteSpace_default_instance_;
class BoxSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoxSpace> _instance;
} _BoxSpace_default_instance_;
class TupleSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TupleSpace> _instance;
} _TupleSpace_default_instance_;
class DictSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictSpace> _instance;
} _DictSpace_default_instance_;
class DataContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataContainer> _instance;
} _DataContainer_default_instance_;
class DiscreteDataContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscreteDataContainer> _instance;
} _DiscreteDataContainer_default_instance_;
class BoxDataContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoxDataContainer> _instance;
} _BoxDataContainer_default_instance_;
class TupleDataContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TupleDataContainer> _instance;
} _TupleDataContainer_default_instance_;
class DictDataContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictDataContainer> _instance;
} _DictDataContainer_default_instance_;
class SimInitMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimInitMsg> _instance;
} _SimInitMsg_default_instance_;
class SimInitAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimInitAck> _instance;
} _SimInitAck_default_instance_;
class EnvStateMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvStateMsg> _instance;
} _EnvStateMsg_default_instance_;
class EnvActMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvActMsg> _instance;
} _EnvActMsg_default_instance_;
}  // namespace ns3_ai_gym
static void InitDefaultsscc_info_BoxDataContainer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_BoxDataContainer_default_instance_;
    new (ptr) ::ns3_ai_gym::BoxDataContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::BoxDataContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoxDataContainer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoxDataContainer_messages_2eproto}, {}};

static void InitDefaultsscc_info_BoxSpace_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_BoxSpace_default_instance_;
    new (ptr) ::ns3_ai_gym::BoxSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::BoxSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoxSpace_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoxSpace_messages_2eproto}, {}};

static void InitDefaultsscc_info_DataContainer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_DataContainer_default_instance_;
    new (ptr) ::ns3_ai_gym::DataContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::DataContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataContainer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataContainer_messages_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_DictDataContainer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_DictDataContainer_default_instance_;
    new (ptr) ::ns3_ai_gym::DictDataContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::DictDataContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DictDataContainer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DictDataContainer_messages_2eproto}, {
      &scc_info_DataContainer_messages_2eproto.base,}};

static void InitDefaultsscc_info_DictSpace_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_DictSpace_default_instance_;
    new (ptr) ::ns3_ai_gym::DictSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::DictSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DictSpace_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DictSpace_messages_2eproto}, {
      &scc_info_SpaceDescription_messages_2eproto.base,}};

static void InitDefaultsscc_info_DiscreteDataContainer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_DiscreteDataContainer_default_instance_;
    new (ptr) ::ns3_ai_gym::DiscreteDataContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::DiscreteDataContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteDataContainer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscreteDataContainer_messages_2eproto}, {}};

static void InitDefaultsscc_info_DiscreteSpace_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_DiscreteSpace_default_instance_;
    new (ptr) ::ns3_ai_gym::DiscreteSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::DiscreteSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteSpace_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscreteSpace_messages_2eproto}, {}};

static void InitDefaultsscc_info_EnvActMsg_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_EnvActMsg_default_instance_;
    new (ptr) ::ns3_ai_gym::EnvActMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::EnvActMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvActMsg_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnvActMsg_messages_2eproto}, {
      &scc_info_DataContainer_messages_2eproto.base,}};

static void InitDefaultsscc_info_EnvStateMsg_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_EnvStateMsg_default_instance_;
    new (ptr) ::ns3_ai_gym::EnvStateMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::EnvStateMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvStateMsg_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnvStateMsg_messages_2eproto}, {
      &scc_info_DataContainer_messages_2eproto.base,}};

static void InitDefaultsscc_info_SimInitAck_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_SimInitAck_default_instance_;
    new (ptr) ::ns3_ai_gym::SimInitAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::SimInitAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimInitAck_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimInitAck_messages_2eproto}, {}};

static void InitDefaultsscc_info_SimInitMsg_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_SimInitMsg_default_instance_;
    new (ptr) ::ns3_ai_gym::SimInitMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::SimInitMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimInitMsg_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimInitMsg_messages_2eproto}, {
      &scc_info_SpaceDescription_messages_2eproto.base,}};

static void InitDefaultsscc_info_SpaceDescription_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_SpaceDescription_default_instance_;
    new (ptr) ::ns3_ai_gym::SpaceDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::SpaceDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpaceDescription_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpaceDescription_messages_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TupleDataContainer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_TupleDataContainer_default_instance_;
    new (ptr) ::ns3_ai_gym::TupleDataContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::TupleDataContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TupleDataContainer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TupleDataContainer_messages_2eproto}, {
      &scc_info_DataContainer_messages_2eproto.base,}};

static void InitDefaultsscc_info_TupleSpace_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ns3_ai_gym::_TupleSpace_default_instance_;
    new (ptr) ::ns3_ai_gym::TupleSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ns3_ai_gym::TupleSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TupleSpace_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TupleSpace_messages_2eproto}, {
      &scc_info_SpaceDescription_messages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SpaceDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SpaceDescription, type_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SpaceDescription, space_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SpaceDescription, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DiscreteSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DiscreteSpace, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, low_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, high_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, dtype_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, shape_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, lows_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxSpace, highs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::TupleSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::TupleSpace, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DictSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DictSpace, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DataContainer, type_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DataContainer, data_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DataContainer, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DiscreteDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DiscreteDataContainer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, dtype_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, shape_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, intdata_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, uintdata_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, floatdata_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::BoxDataContainer, doubledata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::TupleDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::TupleDataContainer, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DictDataContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::DictDataContainer, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitMsg, obsspace_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitMsg, actspace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitAck, done_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::SimInitAck, stopsimreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, obsdata_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, reward_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, isgameover_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, reason_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvStateMsg, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvActMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvActMsg, actdata_),
  PROTOBUF_FIELD_OFFSET(::ns3_ai_gym::EnvActMsg, stopsimreq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ns3_ai_gym::SpaceDescription)},
  { 8, -1, sizeof(::ns3_ai_gym::DiscreteSpace)},
  { 14, -1, sizeof(::ns3_ai_gym::BoxSpace)},
  { 25, -1, sizeof(::ns3_ai_gym::TupleSpace)},
  { 31, -1, sizeof(::ns3_ai_gym::DictSpace)},
  { 37, -1, sizeof(::ns3_ai_gym::DataContainer)},
  { 45, -1, sizeof(::ns3_ai_gym::DiscreteDataContainer)},
  { 51, -1, sizeof(::ns3_ai_gym::BoxDataContainer)},
  { 62, -1, sizeof(::ns3_ai_gym::TupleDataContainer)},
  { 68, -1, sizeof(::ns3_ai_gym::DictDataContainer)},
  { 74, -1, sizeof(::ns3_ai_gym::SimInitMsg)},
  { 81, -1, sizeof(::ns3_ai_gym::SimInitAck)},
  { 88, -1, sizeof(::ns3_ai_gym::EnvStateMsg)},
  { 98, -1, sizeof(::ns3_ai_gym::EnvActMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_SpaceDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_DiscreteSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_BoxSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_TupleSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_DictSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_DataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_DiscreteDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_BoxDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_TupleDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_DictDataContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_SimInitMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_SimInitAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_EnvStateMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3_ai_gym::_EnvActMsg_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\nns3_ai_gym\032\031google/pro"
  "tobuf/any.proto\"j\n\020SpaceDescription\022#\n\004t"
  "ype\030\001 \001(\0162\025.ns3_ai_gym.SpaceType\022#\n\005spac"
  "e\030\002 \001(\0132\024.google.protobuf.Any\022\014\n\004name\030\003 "
  "\001(\t\"\032\n\rDiscreteSpace\022\t\n\001n\030\001 \001(\005\"s\n\010BoxSp"
  "ace\022\013\n\003low\030\001 \001(\002\022\014\n\004high\030\002 \001(\002\022 \n\005dtype\030"
  "\003 \001(\0162\021.ns3_ai_gym.Dtype\022\r\n\005shape\030\004 \003(\r\022"
  "\014\n\004lows\030\005 \003(\002\022\r\n\005highs\030\006 \003(\002\";\n\nTupleSpa"
  "ce\022-\n\007element\030\001 \003(\0132\034.ns3_ai_gym.SpaceDe"
  "scription\":\n\tDictSpace\022-\n\007element\030\001 \003(\0132"
  "\034.ns3_ai_gym.SpaceDescription\"f\n\rDataCon"
  "tainer\022#\n\004type\030\001 \001(\0162\025.ns3_ai_gym.SpaceT"
  "ype\022\"\n\004data\030\002 \001(\0132\024.google.protobuf.Any\022"
  "\014\n\004name\030\003 \001(\t\"%\n\025DiscreteDataContainer\022\014"
  "\n\004data\030\001 \001(\005\"\215\001\n\020BoxDataContainer\022 \n\005dty"
  "pe\030\001 \001(\0162\021.ns3_ai_gym.Dtype\022\r\n\005shape\030\002 \003"
  "(\r\022\017\n\007intData\030\003 \003(\005\022\020\n\010uintData\030\004 \003(\r\022\021\n"
  "\tfloatData\030\005 \003(\002\022\022\n\ndoubleData\030\006 \003(\001\"@\n\022"
  "TupleDataContainer\022*\n\007element\030\001 \003(\0132\031.ns"
  "3_ai_gym.DataContainer\"\?\n\021DictDataContai"
  "ner\022*\n\007element\030\001 \003(\0132\031.ns3_ai_gym.DataCo"
  "ntainer\"l\n\nSimInitMsg\022.\n\010obsSpace\030\001 \001(\0132"
  "\034.ns3_ai_gym.SpaceDescription\022.\n\010actSpac"
  "e\030\002 \001(\0132\034.ns3_ai_gym.SpaceDescription\".\n"
  "\nSimInitAck\022\014\n\004done\030\001 \001(\010\022\022\n\nstopSimReq\030"
  "\002 \001(\010\"\306\001\n\013EnvStateMsg\022*\n\007obsData\030\001 \001(\0132\031"
  ".ns3_ai_gym.DataContainer\022\016\n\006reward\030\002 \001("
  "\002\022\022\n\nisGameOver\030\003 \001(\010\022.\n\006reason\030\004 \001(\0162\036."
  "ns3_ai_gym.EnvStateMsg.Reason\022\014\n\004info\030\005 "
  "\001(\t\")\n\006Reason\022\021\n\rSimulationEnd\020\000\022\014\n\010Game"
  "Over\020\001\"K\n\tEnvActMsg\022*\n\007actData\030\001 \001(\0132\031.n"
  "s3_ai_gym.DataContainer\022\022\n\nstopSimReq\030\002 "
  "\001(\010*\234\001\n\007MsgType\022\013\n\007Unknown\020\000\022\010\n\004Init\020\001\022\017"
  "\n\013ActionSpace\020\002\022\024\n\020ObservationSpace\020\003\022\016\n"
  "\nIsGameOver\020\004\022\017\n\013Observation\020\005\022\n\n\006Reward"
  "\020\006\022\r\n\tExtraInfo\020\007\022\n\n\006Action\020\010\022\013\n\007StopEnv"
  "\020\t*H\n\tSpaceType\022\017\n\013NoSpaceType\020\000\022\014\n\010Disc"
  "rete\020\001\022\007\n\003Box\020\002\022\t\n\005Tuple\020\003\022\010\n\004Dict\020\004*>\n\005"
  "Dtype\022\013\n\007NoDType\020\000\022\007\n\003INT\020\001\022\010\n\004UINT\020\002\022\t\n"
  "\005FLOAT\020\003\022\n\n\006DOUBLE\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2eproto_sccs[14] = {
  &scc_info_BoxDataContainer_messages_2eproto.base,
  &scc_info_BoxSpace_messages_2eproto.base,
  &scc_info_DataContainer_messages_2eproto.base,
  &scc_info_DictDataContainer_messages_2eproto.base,
  &scc_info_DictSpace_messages_2eproto.base,
  &scc_info_DiscreteDataContainer_messages_2eproto.base,
  &scc_info_DiscreteSpace_messages_2eproto.base,
  &scc_info_EnvActMsg_messages_2eproto.base,
  &scc_info_EnvStateMsg_messages_2eproto.base,
  &scc_info_SimInitAck_messages_2eproto.base,
  &scc_info_SimInitMsg_messages_2eproto.base,
  &scc_info_SpaceDescription_messages_2eproto.base,
  &scc_info_TupleDataContainer_messages_2eproto.base,
  &scc_info_TupleSpace_messages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, descriptor_table_protodef_messages_2eproto, "messages.proto", 1588,
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_sccs, descriptor_table_messages_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 14, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2eproto)), true);
namespace ns3_ai_gym {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvStateMsg_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool EnvStateMsg_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvStateMsg_Reason EnvStateMsg::SimulationEnd;
constexpr EnvStateMsg_Reason EnvStateMsg::GameOver;
constexpr EnvStateMsg_Reason EnvStateMsg::Reason_MIN;
constexpr EnvStateMsg_Reason EnvStateMsg::Reason_MAX;
constexpr int EnvStateMsg::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[3];
}
bool Dtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SpaceDescription::InitAsDefaultInstance() {
  ::ns3_ai_gym::_SpaceDescription_default_instance_._instance.get_mutable()->space_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class SpaceDescription::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& space(const SpaceDescription* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
SpaceDescription::_Internal::space(const SpaceDescription* msg) {
  return *msg->space_;
}
void SpaceDescription::clear_space() {
  if (GetArena() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
SpaceDescription::SpaceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.SpaceDescription)
}
SpaceDescription::SpaceDescription(const SpaceDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_space()) {
    space_ = new PROTOBUF_NAMESPACE_ID::Any(*from.space_);
  } else {
    space_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.SpaceDescription)
}

void SpaceDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpaceDescription_messages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&space_)) + sizeof(type_));
}

SpaceDescription::~SpaceDescription() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.SpaceDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpaceDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void SpaceDescription::ArenaDtor(void* object) {
  SpaceDescription* _this = reinterpret_cast< SpaceDescription* >(object);
  (void)_this;
}
void SpaceDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpaceDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpaceDescription& SpaceDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpaceDescription_messages_2eproto.base);
  return *internal_default_instance();
}


void SpaceDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.SpaceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpaceDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ns3_ai_gym::SpaceType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3_ai_gym.SpaceDescription.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpaceDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.SpaceDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.SpaceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any space = 2;
  if (this->has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::space(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_ai_gym.SpaceDescription.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.SpaceDescription)
  return target;
}

size_t SpaceDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.SpaceDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any space = 2;
  if (this->has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  // .ns3_ai_gym.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpaceDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.SpaceDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SpaceDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpaceDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.SpaceDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.SpaceDescription)
    MergeFrom(*source);
  }
}

void SpaceDescription::MergeFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.SpaceDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_space()) {
    _internal_mutable_space()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_space());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SpaceDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.SpaceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpaceDescription::CopyFrom(const SpaceDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.SpaceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpaceDescription::IsInitialized() const {
  return true;
}

void SpaceDescription::InternalSwap(SpaceDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpaceDescription, type_)
      + sizeof(SpaceDescription::type_)
      - PROTOBUF_FIELD_OFFSET(SpaceDescription, space_)>(
          reinterpret_cast<char*>(&space_),
          reinterpret_cast<char*>(&other->space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpaceDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscreteSpace::InitAsDefaultInstance() {
}
class DiscreteSpace::_Internal {
 public:
};

DiscreteSpace::DiscreteSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.DiscreteSpace)
}
DiscreteSpace::DiscreteSpace(const DiscreteSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.DiscreteSpace)
}

void DiscreteSpace::SharedCtor() {
  n_ = 0;
}

DiscreteSpace::~DiscreteSpace() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.DiscreteSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiscreteSpace::ArenaDtor(void* object) {
  DiscreteSpace* _this = reinterpret_cast< DiscreteSpace* >(object);
  (void)_this;
}
void DiscreteSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscreteSpace& DiscreteSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscreteSpace_messages_2eproto.base);
  return *internal_default_instance();
}


void DiscreteSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.DiscreteSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.DiscreteSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.DiscreteSpace)
  return target;
}

size_t DiscreteSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.DiscreteSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.DiscreteSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.DiscreteSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.DiscreteSpace)
    MergeFrom(*source);
  }
}

void DiscreteSpace::MergeFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.DiscreteSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void DiscreteSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteSpace::CopyFrom(const DiscreteSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.DiscreteSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteSpace::IsInitialized() const {
  return true;
}

void DiscreteSpace::InternalSwap(DiscreteSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoxSpace::InitAsDefaultInstance() {
}
class BoxSpace::_Internal {
 public:
};

BoxSpace::BoxSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena),
  lows_(arena),
  highs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.BoxSpace)
}
BoxSpace::BoxSpace(const BoxSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      lows_(from.lows_),
      highs_(from.highs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.BoxSpace)
}

void BoxSpace::SharedCtor() {
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
}

BoxSpace::~BoxSpace() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.BoxSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoxSpace::ArenaDtor(void* object) {
  BoxSpace* _this = reinterpret_cast< BoxSpace* >(object);
  (void)_this;
}
void BoxSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoxSpace& BoxSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoxSpace_messages_2eproto.base);
  return *internal_default_instance();
}


void BoxSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.BoxSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  lows_.Clear();
  highs_.Clear();
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&low_)) + sizeof(dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ns3_ai_gym.Dtype dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::ns3_ai_gym::Dtype>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float lows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lows(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_lows(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float highs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_highs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_highs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.BoxSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float low = 1;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_low(), target);
  }

  // float high = 2;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_high(), target);
  }

  // .ns3_ai_gym.Dtype dtype = 3;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  // repeated uint32 shape = 4;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  // repeated float lows = 5;
  if (this->_internal_lows_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_lows(), target);
  }

  // repeated float highs = 6;
  if (this->_internal_highs_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_highs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.BoxSpace)
  return target;
}

size_t BoxSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.BoxSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lows = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lows_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lows_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float highs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_highs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _highs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float low = 1;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 4;
  }

  // float high = 2;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 4;
  }

  // .ns3_ai_gym.Dtype dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.BoxSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.BoxSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.BoxSpace)
    MergeFrom(*source);
  }
}

void BoxSpace::MergeFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.BoxSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  lows_.MergeFrom(from.lows_);
  highs_.MergeFrom(from.highs_);
  if (!(from.low() <= 0 && from.low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void BoxSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxSpace::CopyFrom(const BoxSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.BoxSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxSpace::IsInitialized() const {
  return true;
}

void BoxSpace::InternalSwap(BoxSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  lows_.InternalSwap(&other->lows_);
  highs_.InternalSwap(&other->highs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxSpace, dtype_)
      + sizeof(BoxSpace::dtype_)
      - PROTOBUF_FIELD_OFFSET(BoxSpace, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TupleSpace::InitAsDefaultInstance() {
}
class TupleSpace::_Internal {
 public:
};

TupleSpace::TupleSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.TupleSpace)
}
TupleSpace::TupleSpace(const TupleSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.TupleSpace)
}

void TupleSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TupleSpace_messages_2eproto.base);
}

TupleSpace::~TupleSpace() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.TupleSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TupleSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TupleSpace::ArenaDtor(void* object) {
  TupleSpace* _this = reinterpret_cast< TupleSpace* >(object);
  (void)_this;
}
void TupleSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TupleSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TupleSpace& TupleSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TupleSpace_messages_2eproto.base);
  return *internal_default_instance();
}


void TupleSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.TupleSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ns3_ai_gym.SpaceDescription element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.TupleSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.TupleSpace)
  return target;
}

size_t TupleSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.TupleSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TupleSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.TupleSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const TupleSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TupleSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.TupleSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.TupleSpace)
    MergeFrom(*source);
  }
}

void TupleSpace::MergeFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.TupleSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void TupleSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.TupleSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleSpace::CopyFrom(const TupleSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.TupleSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleSpace::IsInitialized() const {
  return true;
}

void TupleSpace::InternalSwap(TupleSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DictSpace::InitAsDefaultInstance() {
}
class DictSpace::_Internal {
 public:
};

DictSpace::DictSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.DictSpace)
}
DictSpace::DictSpace(const DictSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.DictSpace)
}

void DictSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictSpace_messages_2eproto.base);
}

DictSpace::~DictSpace() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.DictSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DictSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DictSpace::ArenaDtor(void* object) {
  DictSpace* _this = reinterpret_cast< DictSpace* >(object);
  (void)_this;
}
void DictSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DictSpace& DictSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictSpace_messages_2eproto.base);
  return *internal_default_instance();
}


void DictSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.DictSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ns3_ai_gym.SpaceDescription element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.DictSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.DictSpace)
  return target;
}

size_t DictSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.DictSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.SpaceDescription element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.DictSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const DictSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.DictSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.DictSpace)
    MergeFrom(*source);
  }
}

void DictSpace::MergeFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.DictSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void DictSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictSpace::CopyFrom(const DictSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.DictSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictSpace::IsInitialized() const {
  return true;
}

void DictSpace::InternalSwap(DictSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataContainer::InitAsDefaultInstance() {
  ::ns3_ai_gym::_DataContainer_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class DataContainer::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const DataContainer* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
DataContainer::_Internal::data(const DataContainer* msg) {
  return *msg->data_;
}
void DataContainer::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
DataContainer::DataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.DataContainer)
}
DataContainer::DataContainer(const DataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.DataContainer)
}

void DataContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataContainer_messages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_)) + sizeof(type_));
}

DataContainer::~DataContainer() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.DataContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DataContainer::ArenaDtor(void* object) {
  DataContainer* _this = reinterpret_cast< DataContainer* >(object);
  (void)_this;
}
void DataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataContainer& DataContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataContainer_messages_2eproto.base);
  return *internal_default_instance();
}


void DataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.SpaceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ns3_ai_gym::SpaceType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3_ai_gym.DataContainer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.DataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.SpaceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_ai_gym.DataContainer.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.DataContainer)
  return target;
}

size_t DataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.DataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .ns3_ai_gym.SpaceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.DataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const DataContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.DataContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.DataContainer)
    MergeFrom(*source);
  }
}

void DataContainer::MergeFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.DataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DataContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataContainer::CopyFrom(const DataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.DataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataContainer::IsInitialized() const {
  return true;
}

void DataContainer::InternalSwap(DataContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataContainer, type_)
      + sizeof(DataContainer::type_)
      - PROTOBUF_FIELD_OFFSET(DataContainer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscreteDataContainer::InitAsDefaultInstance() {
}
class DiscreteDataContainer::_Internal {
 public:
};

DiscreteDataContainer::DiscreteDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.DiscreteDataContainer)
}
DiscreteDataContainer::DiscreteDataContainer(const DiscreteDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.DiscreteDataContainer)
}

void DiscreteDataContainer::SharedCtor() {
  data_ = 0;
}

DiscreteDataContainer::~DiscreteDataContainer() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.DiscreteDataContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiscreteDataContainer::ArenaDtor(void* object) {
  DiscreteDataContainer* _this = reinterpret_cast< DiscreteDataContainer* >(object);
  (void)_this;
}
void DiscreteDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscreteDataContainer& DiscreteDataContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscreteDataContainer_messages_2eproto.base);
  return *internal_default_instance();
}


void DiscreteDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.DiscreteDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.DiscreteDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.DiscreteDataContainer)
  return target;
}

size_t DiscreteDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.DiscreteDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteDataContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.DiscreteDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteDataContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteDataContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.DiscreteDataContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.DiscreteDataContainer)
    MergeFrom(*source);
  }
}

void DiscreteDataContainer::MergeFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.DiscreteDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void DiscreteDataContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.DiscreteDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteDataContainer::CopyFrom(const DiscreteDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.DiscreteDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteDataContainer::IsInitialized() const {
  return true;
}

void DiscreteDataContainer::InternalSwap(DiscreteDataContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteDataContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoxDataContainer::InitAsDefaultInstance() {
}
class BoxDataContainer::_Internal {
 public:
};

BoxDataContainer::BoxDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena),
  intdata_(arena),
  uintdata_(arena),
  floatdata_(arena),
  doubledata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.BoxDataContainer)
}
BoxDataContainer::BoxDataContainer(const BoxDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      intdata_(from.intdata_),
      uintdata_(from.uintdata_),
      floatdata_(from.floatdata_),
      doubledata_(from.doubledata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.BoxDataContainer)
}

void BoxDataContainer::SharedCtor() {
  dtype_ = 0;
}

BoxDataContainer::~BoxDataContainer() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.BoxDataContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoxDataContainer::ArenaDtor(void* object) {
  BoxDataContainer* _this = reinterpret_cast< BoxDataContainer* >(object);
  (void)_this;
}
void BoxDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoxDataContainer& BoxDataContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoxDataContainer_messages_2eproto.base);
  return *internal_default_instance();
}


void BoxDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.BoxDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  intdata_.Clear();
  uintdata_.Clear();
  floatdata_.Clear();
  doubledata_.Clear();
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.Dtype dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::ns3_ai_gym::Dtype>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_intdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uintData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uintdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_uintdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floatData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_floatdata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double doubleData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doubledata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_doubledata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.BoxDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.Dtype dtype = 1;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // repeated uint32 shape = 2;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // repeated int32 intData = 3;
  {
    int byte_size = _intdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_intdata(), byte_size, target);
    }
  }

  // repeated uint32 uintData = 4;
  {
    int byte_size = _uintdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_uintdata(), byte_size, target);
    }
  }

  // repeated float floatData = 5;
  if (this->_internal_floatdata_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_floatdata(), target);
  }

  // repeated double doubleData = 6;
  if (this->_internal_doubledata_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_doubledata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.BoxDataContainer)
  return target;
}

size_t BoxDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.BoxDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 intData = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 uintData = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uintdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uintdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floatData = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatdata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _floatdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double doubleData = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doubledata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _doubledata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ns3_ai_gym.Dtype dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDataContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.BoxDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDataContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDataContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.BoxDataContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.BoxDataContainer)
    MergeFrom(*source);
  }
}

void BoxDataContainer::MergeFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.BoxDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  intdata_.MergeFrom(from.intdata_);
  uintdata_.MergeFrom(from.uintdata_);
  floatdata_.MergeFrom(from.floatdata_);
  doubledata_.MergeFrom(from.doubledata_);
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void BoxDataContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.BoxDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDataContainer::CopyFrom(const BoxDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.BoxDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDataContainer::IsInitialized() const {
  return true;
}

void BoxDataContainer::InternalSwap(BoxDataContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  intdata_.InternalSwap(&other->intdata_);
  uintdata_.InternalSwap(&other->uintdata_);
  floatdata_.InternalSwap(&other->floatdata_);
  doubledata_.InternalSwap(&other->doubledata_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDataContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TupleDataContainer::InitAsDefaultInstance() {
}
class TupleDataContainer::_Internal {
 public:
};

TupleDataContainer::TupleDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.TupleDataContainer)
}
TupleDataContainer::TupleDataContainer(const TupleDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.TupleDataContainer)
}

void TupleDataContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TupleDataContainer_messages_2eproto.base);
}

TupleDataContainer::~TupleDataContainer() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.TupleDataContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TupleDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TupleDataContainer::ArenaDtor(void* object) {
  TupleDataContainer* _this = reinterpret_cast< TupleDataContainer* >(object);
  (void)_this;
}
void TupleDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TupleDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TupleDataContainer& TupleDataContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TupleDataContainer_messages_2eproto.base);
  return *internal_default_instance();
}


void TupleDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.TupleDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ns3_ai_gym.DataContainer element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.TupleDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.DataContainer element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.TupleDataContainer)
  return target;
}

size_t TupleDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.TupleDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.DataContainer element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TupleDataContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.TupleDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const TupleDataContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TupleDataContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.TupleDataContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.TupleDataContainer)
    MergeFrom(*source);
  }
}

void TupleDataContainer::MergeFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.TupleDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void TupleDataContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.TupleDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleDataContainer::CopyFrom(const TupleDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.TupleDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleDataContainer::IsInitialized() const {
  return true;
}

void TupleDataContainer::InternalSwap(TupleDataContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleDataContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DictDataContainer::InitAsDefaultInstance() {
}
class DictDataContainer::_Internal {
 public:
};

DictDataContainer::DictDataContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.DictDataContainer)
}
DictDataContainer::DictDataContainer(const DictDataContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.DictDataContainer)
}

void DictDataContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DictDataContainer_messages_2eproto.base);
}

DictDataContainer::~DictDataContainer() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.DictDataContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DictDataContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DictDataContainer::ArenaDtor(void* object) {
  DictDataContainer* _this = reinterpret_cast< DictDataContainer* >(object);
  (void)_this;
}
void DictDataContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictDataContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DictDataContainer& DictDataContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DictDataContainer_messages_2eproto.base);
  return *internal_default_instance();
}


void DictDataContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.DictDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictDataContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ns3_ai_gym.DataContainer element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictDataContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.DictDataContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.DataContainer element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.DictDataContainer)
  return target;
}

size_t DictDataContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.DictDataContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_ai_gym.DataContainer element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictDataContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.DictDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const DictDataContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictDataContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.DictDataContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.DictDataContainer)
    MergeFrom(*source);
  }
}

void DictDataContainer::MergeFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.DictDataContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void DictDataContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.DictDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictDataContainer::CopyFrom(const DictDataContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.DictDataContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictDataContainer::IsInitialized() const {
  return true;
}

void DictDataContainer::InternalSwap(DictDataContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictDataContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimInitMsg::InitAsDefaultInstance() {
  ::ns3_ai_gym::_SimInitMsg_default_instance_._instance.get_mutable()->obsspace_ = const_cast< ::ns3_ai_gym::SpaceDescription*>(
      ::ns3_ai_gym::SpaceDescription::internal_default_instance());
  ::ns3_ai_gym::_SimInitMsg_default_instance_._instance.get_mutable()->actspace_ = const_cast< ::ns3_ai_gym::SpaceDescription*>(
      ::ns3_ai_gym::SpaceDescription::internal_default_instance());
}
class SimInitMsg::_Internal {
 public:
  static const ::ns3_ai_gym::SpaceDescription& obsspace(const SimInitMsg* msg);
  static const ::ns3_ai_gym::SpaceDescription& actspace(const SimInitMsg* msg);
};

const ::ns3_ai_gym::SpaceDescription&
SimInitMsg::_Internal::obsspace(const SimInitMsg* msg) {
  return *msg->obsspace_;
}
const ::ns3_ai_gym::SpaceDescription&
SimInitMsg::_Internal::actspace(const SimInitMsg* msg) {
  return *msg->actspace_;
}
SimInitMsg::SimInitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.SimInitMsg)
}
SimInitMsg::SimInitMsg(const SimInitMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obsspace()) {
    obsspace_ = new ::ns3_ai_gym::SpaceDescription(*from.obsspace_);
  } else {
    obsspace_ = nullptr;
  }
  if (from._internal_has_actspace()) {
    actspace_ = new ::ns3_ai_gym::SpaceDescription(*from.actspace_);
  } else {
    actspace_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.SimInitMsg)
}

void SimInitMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimInitMsg_messages_2eproto.base);
  ::memset(&obsspace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actspace_) -
      reinterpret_cast<char*>(&obsspace_)) + sizeof(actspace_));
}

SimInitMsg::~SimInitMsg() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.SimInitMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimInitMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete obsspace_;
  if (this != internal_default_instance()) delete actspace_;
}

void SimInitMsg::ArenaDtor(void* object) {
  SimInitMsg* _this = reinterpret_cast< SimInitMsg* >(object);
  (void)_this;
}
void SimInitMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimInitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimInitMsg& SimInitMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimInitMsg_messages_2eproto.base);
  return *internal_default_instance();
}


void SimInitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.SimInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && obsspace_ != nullptr) {
    delete obsspace_;
  }
  obsspace_ = nullptr;
  if (GetArena() == nullptr && actspace_ != nullptr) {
    delete actspace_;
  }
  actspace_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimInitMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.SpaceDescription obsSpace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ns3_ai_gym.SpaceDescription actSpace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimInitMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.SimInitMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.SpaceDescription obsSpace = 1;
  if (this->has_obsspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obsspace(this), target, stream);
  }

  // .ns3_ai_gym.SpaceDescription actSpace = 2;
  if (this->has_actspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actspace(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.SimInitMsg)
  return target;
}

size_t SimInitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.SimInitMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3_ai_gym.SpaceDescription obsSpace = 1;
  if (this->has_obsspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsspace_);
  }

  // .ns3_ai_gym.SpaceDescription actSpace = 2;
  if (this->has_actspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actspace_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimInitMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.SimInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SimInitMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimInitMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.SimInitMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.SimInitMsg)
    MergeFrom(*source);
  }
}

void SimInitMsg::MergeFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.SimInitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obsspace()) {
    _internal_mutable_obsspace()->::ns3_ai_gym::SpaceDescription::MergeFrom(from._internal_obsspace());
  }
  if (from.has_actspace()) {
    _internal_mutable_actspace()->::ns3_ai_gym::SpaceDescription::MergeFrom(from._internal_actspace());
  }
}

void SimInitMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.SimInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInitMsg::CopyFrom(const SimInitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.SimInitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitMsg::IsInitialized() const {
  return true;
}

void SimInitMsg::InternalSwap(SimInitMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimInitMsg, actspace_)
      + sizeof(SimInitMsg::actspace_)
      - PROTOBUF_FIELD_OFFSET(SimInitMsg, obsspace_)>(
          reinterpret_cast<char*>(&obsspace_),
          reinterpret_cast<char*>(&other->obsspace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimInitMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimInitAck::InitAsDefaultInstance() {
}
class SimInitAck::_Internal {
 public:
};

SimInitAck::SimInitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.SimInitAck)
}
SimInitAck::SimInitAck(const SimInitAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&done_, &from.done_,
    static_cast<size_t>(reinterpret_cast<char*>(&stopsimreq_) -
    reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.SimInitAck)
}

void SimInitAck::SharedCtor() {
  ::memset(&done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stopsimreq_) -
      reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
}

SimInitAck::~SimInitAck() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.SimInitAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimInitAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimInitAck::ArenaDtor(void* object) {
  SimInitAck* _this = reinterpret_cast< SimInitAck* >(object);
  (void)_this;
}
void SimInitAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimInitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimInitAck& SimInitAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimInitAck_messages_2eproto.base);
  return *internal_default_instance();
}


void SimInitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.SimInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stopsimreq_) -
      reinterpret_cast<char*>(&done_)) + sizeof(stopsimreq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimInitAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool done = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stopSimReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stopsimreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimInitAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.SimInitAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool done = 1;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_done(), target);
  }

  // bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stopsimreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.SimInitAck)
  return target;
}

size_t SimInitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.SimInitAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool done = 1;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  // bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimInitAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.SimInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SimInitAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimInitAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.SimInitAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.SimInitAck)
    MergeFrom(*source);
  }
}

void SimInitAck::MergeFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.SimInitAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
  if (from.stopsimreq() != 0) {
    _internal_set_stopsimreq(from._internal_stopsimreq());
  }
}

void SimInitAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.SimInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInitAck::CopyFrom(const SimInitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.SimInitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInitAck::IsInitialized() const {
  return true;
}

void SimInitAck::InternalSwap(SimInitAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimInitAck, stopsimreq_)
      + sizeof(SimInitAck::stopsimreq_)
      - PROTOBUF_FIELD_OFFSET(SimInitAck, done_)>(
          reinterpret_cast<char*>(&done_),
          reinterpret_cast<char*>(&other->done_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimInitAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvStateMsg::InitAsDefaultInstance() {
  ::ns3_ai_gym::_EnvStateMsg_default_instance_._instance.get_mutable()->obsdata_ = const_cast< ::ns3_ai_gym::DataContainer*>(
      ::ns3_ai_gym::DataContainer::internal_default_instance());
}
class EnvStateMsg::_Internal {
 public:
  static const ::ns3_ai_gym::DataContainer& obsdata(const EnvStateMsg* msg);
};

const ::ns3_ai_gym::DataContainer&
EnvStateMsg::_Internal::obsdata(const EnvStateMsg* msg) {
  return *msg->obsdata_;
}
EnvStateMsg::EnvStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.EnvStateMsg)
}
EnvStateMsg::EnvStateMsg(const EnvStateMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  if (from._internal_has_obsdata()) {
    obsdata_ = new ::ns3_ai_gym::DataContainer(*from.obsdata_);
  } else {
    obsdata_ = nullptr;
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.EnvStateMsg)
}

void EnvStateMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvStateMsg_messages_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&obsdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&obsdata_)) + sizeof(reason_));
}

EnvStateMsg::~EnvStateMsg() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.EnvStateMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvStateMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obsdata_;
}

void EnvStateMsg::ArenaDtor(void* object) {
  EnvStateMsg* _this = reinterpret_cast< EnvStateMsg* >(object);
  (void)_this;
}
void EnvStateMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvStateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvStateMsg& EnvStateMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvStateMsg_messages_2eproto.base);
  return *internal_default_instance();
}


void EnvStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.EnvStateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && obsdata_ != nullptr) {
    delete obsdata_;
  }
  obsdata_ = nullptr;
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvStateMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.DataContainer obsData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isGameOver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isgameover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ns3_ai_gym.EnvStateMsg.Reason reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::ns3_ai_gym::EnvStateMsg_Reason>(val));
        } else goto handle_unusual;
        continue;
      // string info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ns3_ai_gym.EnvStateMsg.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvStateMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.EnvStateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.DataContainer obsData = 1;
  if (this->has_obsdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obsdata(this), target, stream);
  }

  // float reward = 2;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_reward(), target);
  }

  // bool isGameOver = 3;
  if (this->isgameover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isgameover(), target);
  }

  // .ns3_ai_gym.EnvStateMsg.Reason reason = 4;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  // string info = 5;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_ai_gym.EnvStateMsg.info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.EnvStateMsg)
  return target;
}

size_t EnvStateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.EnvStateMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 5;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .ns3_ai_gym.DataContainer obsData = 1;
  if (this->has_obsdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsdata_);
  }

  // float reward = 2;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isGameOver = 3;
  if (this->isgameover() != 0) {
    total_size += 1 + 1;
  }

  // .ns3_ai_gym.EnvStateMsg.Reason reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvStateMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.EnvStateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvStateMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvStateMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.EnvStateMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.EnvStateMsg)
    MergeFrom(*source);
  }
}

void EnvStateMsg::MergeFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.EnvStateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.has_obsdata()) {
    _internal_mutable_obsdata()->::ns3_ai_gym::DataContainer::MergeFrom(from._internal_obsdata());
  }
  if (!(from.reward() <= 0 && from.reward() >= 0)) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.isgameover() != 0) {
    _internal_set_isgameover(from._internal_isgameover());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void EnvStateMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.EnvStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvStateMsg::CopyFrom(const EnvStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.EnvStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvStateMsg::IsInitialized() const {
  return true;
}

void EnvStateMsg::InternalSwap(EnvStateMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvStateMsg, reason_)
      + sizeof(EnvStateMsg::reason_)
      - PROTOBUF_FIELD_OFFSET(EnvStateMsg, obsdata_)>(
          reinterpret_cast<char*>(&obsdata_),
          reinterpret_cast<char*>(&other->obsdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvStateMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvActMsg::InitAsDefaultInstance() {
  ::ns3_ai_gym::_EnvActMsg_default_instance_._instance.get_mutable()->actdata_ = const_cast< ::ns3_ai_gym::DataContainer*>(
      ::ns3_ai_gym::DataContainer::internal_default_instance());
}
class EnvActMsg::_Internal {
 public:
  static const ::ns3_ai_gym::DataContainer& actdata(const EnvActMsg* msg);
};

const ::ns3_ai_gym::DataContainer&
EnvActMsg::_Internal::actdata(const EnvActMsg* msg) {
  return *msg->actdata_;
}
EnvActMsg::EnvActMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ns3_ai_gym.EnvActMsg)
}
EnvActMsg::EnvActMsg(const EnvActMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actdata()) {
    actdata_ = new ::ns3_ai_gym::DataContainer(*from.actdata_);
  } else {
    actdata_ = nullptr;
  }
  stopsimreq_ = from.stopsimreq_;
  // @@protoc_insertion_point(copy_constructor:ns3_ai_gym.EnvActMsg)
}

void EnvActMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvActMsg_messages_2eproto.base);
  ::memset(&actdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stopsimreq_) -
      reinterpret_cast<char*>(&actdata_)) + sizeof(stopsimreq_));
}

EnvActMsg::~EnvActMsg() {
  // @@protoc_insertion_point(destructor:ns3_ai_gym.EnvActMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvActMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actdata_;
}

void EnvActMsg::ArenaDtor(void* object) {
  EnvActMsg* _this = reinterpret_cast< EnvActMsg* >(object);
  (void)_this;
}
void EnvActMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvActMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvActMsg& EnvActMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvActMsg_messages_2eproto.base);
  return *internal_default_instance();
}


void EnvActMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_ai_gym.EnvActMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actdata_ != nullptr) {
    delete actdata_;
  }
  actdata_ = nullptr;
  stopsimreq_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvActMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ns3_ai_gym.DataContainer actData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stopSimReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stopsimreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvActMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_ai_gym.EnvActMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_ai_gym.DataContainer actData = 1;
  if (this->has_actdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actdata(this), target, stream);
  }

  // bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stopsimreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_ai_gym.EnvActMsg)
  return target;
}

size_t EnvActMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_ai_gym.EnvActMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3_ai_gym.DataContainer actData = 1;
  if (this->has_actdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actdata_);
  }

  // bool stopSimReq = 2;
  if (this->stopsimreq() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvActMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ns3_ai_gym.EnvActMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvActMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvActMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ns3_ai_gym.EnvActMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ns3_ai_gym.EnvActMsg)
    MergeFrom(*source);
  }
}

void EnvActMsg::MergeFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3_ai_gym.EnvActMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actdata()) {
    _internal_mutable_actdata()->::ns3_ai_gym::DataContainer::MergeFrom(from._internal_actdata());
  }
  if (from.stopsimreq() != 0) {
    _internal_set_stopsimreq(from._internal_stopsimreq());
  }
}

void EnvActMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ns3_ai_gym.EnvActMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvActMsg::CopyFrom(const EnvActMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_ai_gym.EnvActMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvActMsg::IsInitialized() const {
  return true;
}

void EnvActMsg::InternalSwap(EnvActMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvActMsg, stopsimreq_)
      + sizeof(EnvActMsg::stopsimreq_)
      - PROTOBUF_FIELD_OFFSET(EnvActMsg, actdata_)>(
          reinterpret_cast<char*>(&actdata_),
          reinterpret_cast<char*>(&other->actdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvActMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3_ai_gym
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::SpaceDescription* Arena::CreateMaybeMessage< ::ns3_ai_gym::SpaceDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::SpaceDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::DiscreteSpace* Arena::CreateMaybeMessage< ::ns3_ai_gym::DiscreteSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::DiscreteSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::BoxSpace* Arena::CreateMaybeMessage< ::ns3_ai_gym::BoxSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::BoxSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::TupleSpace* Arena::CreateMaybeMessage< ::ns3_ai_gym::TupleSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::TupleSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::DictSpace* Arena::CreateMaybeMessage< ::ns3_ai_gym::DictSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::DictSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::DataContainer* Arena::CreateMaybeMessage< ::ns3_ai_gym::DataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::DataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::DiscreteDataContainer* Arena::CreateMaybeMessage< ::ns3_ai_gym::DiscreteDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::DiscreteDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::BoxDataContainer* Arena::CreateMaybeMessage< ::ns3_ai_gym::BoxDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::BoxDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::TupleDataContainer* Arena::CreateMaybeMessage< ::ns3_ai_gym::TupleDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::TupleDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::DictDataContainer* Arena::CreateMaybeMessage< ::ns3_ai_gym::DictDataContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::DictDataContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::SimInitMsg* Arena::CreateMaybeMessage< ::ns3_ai_gym::SimInitMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::SimInitMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::SimInitAck* Arena::CreateMaybeMessage< ::ns3_ai_gym::SimInitAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::SimInitAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::EnvStateMsg* Arena::CreateMaybeMessage< ::ns3_ai_gym::EnvStateMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::EnvStateMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_ai_gym::EnvActMsg* Arena::CreateMaybeMessage< ::ns3_ai_gym::EnvActMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_ai_gym::EnvActMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
